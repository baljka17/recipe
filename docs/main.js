(()=>{var e={797:e=>{var t="undefined"!=typeof process&&process.pid?process.pid.toString(36):"";function n(){var e=Date.now(),t=n.last||e;return n.last=e>t?e:t+1}e.exports=e.exports.default=function(e,r){return(e||"")+""+t+n().toString(36)+(r||"")},e.exports.process=function(e,r){return(e||"")+t+n().toString(36)+(r||"")},e.exports.time=function(e,t){return(e||"")+n().toString(36)+(t||"")}}},t={};function n(r){var s=t[r];if(void 0!==s)return s.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e={};function t(e,t){return function(){return e.apply(t,arguments)}}n.r(e),n.d(e,{hasBrowserEnv:()=>te,hasStandardBrowserEnv:()=>ne,hasStandardBrowserWebWorkerEnv:()=>se});const{toString:r}=Object.prototype,{getPrototypeOf:s}=Object,i=(o=Object.create(null),e=>{const t=r.call(e);return o[t]||(o[t]=t.slice(8,-1).toLowerCase())});var o;const a=e=>(e=e.toLowerCase(),t=>i(t)===e),c=e=>t=>typeof t===e,{isArray:l}=Array,u=c("undefined"),d=a("ArrayBuffer"),f=c("string"),p=c("function"),h=c("number"),m=e=>null!==e&&"object"==typeof e,g=e=>{if("object"!==i(e))return!1;const t=s(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},b=a("Date"),y=a("File"),v=a("Blob"),_=a("FileList"),w=a("URLSearchParams");function E(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,s;if("object"!=typeof e&&(e=[e]),l(e))for(r=0,s=e.length;r<s;r++)t.call(null,e[r],r,e);else{const s=n?Object.getOwnPropertyNames(e):Object.keys(e),i=s.length;let o;for(r=0;r<i;r++)o=s[r],t.call(null,e[o],o,e)}}function S(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,s=n.length;for(;s-- >0;)if(r=n[s],t===r.toLowerCase())return r;return null}const O="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,R=e=>!u(e)&&e!==O,k=(T="undefined"!=typeof Uint8Array&&s(Uint8Array),e=>T&&e instanceof T);var T;const A=a("HTMLFormElement"),L=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),j=a("RegExp"),x=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};E(n,((n,s)=>{let i;!1!==(i=t(n,s,e))&&(r[s]=i||n)})),Object.defineProperties(e,r)},N="abcdefghijklmnopqrstuvwxyz",C="0123456789",P={DIGIT:C,ALPHA:N,ALPHA_DIGIT:N+N.toUpperCase()+C},D=a("AsyncFunction"),F={isArray:l,isArrayBuffer:d,isBuffer:function(e){return null!==e&&!u(e)&&null!==e.constructor&&!u(e.constructor)&&p(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||p(e.append)&&("formdata"===(t=i(e))||"object"===t&&p(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&d(e.buffer),t},isString:f,isNumber:h,isBoolean:e=>!0===e||!1===e,isObject:m,isPlainObject:g,isUndefined:u,isDate:b,isFile:y,isBlob:v,isRegExp:j,isFunction:p,isStream:e=>m(e)&&p(e.pipe),isURLSearchParams:w,isTypedArray:k,isFileList:_,forEach:E,merge:function e(){const{caseless:t}=R(this)&&this||{},n={},r=(r,s)=>{const i=t&&S(n,s)||s;g(n[i])&&g(r)?n[i]=e(n[i],r):g(r)?n[i]=e({},r):l(r)?n[i]=r.slice():n[i]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&E(arguments[e],r);return n},extend:(e,n,r,{allOwnKeys:s}={})=>(E(n,((n,s)=>{r&&p(n)?e[s]=t(n,r):e[s]=n}),{allOwnKeys:s}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let i,o,a;const c={};if(t=t||{},null==e)return t;do{for(i=Object.getOwnPropertyNames(e),o=i.length;o-- >0;)a=i[o],r&&!r(a,e,t)||c[a]||(t[a]=e[a],c[a]=!0);e=!1!==n&&s(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:i,kindOfTest:a,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(l(e))return e;let t=e.length;if(!h(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:A,hasOwnProperty:L,hasOwnProp:L,reduceDescriptors:x,freezeMethods:e=>{x(e,((t,n)=>{if(p(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];p(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return l(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:S,global:O,isContextDefined:R,ALPHABET:P,generateString:(e=16,t=P.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&p(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(m(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const s=l(e)?[]:{};return E(e,((e,t)=>{const i=n(e,r+1);!u(i)&&(s[t]=i)})),t[r]=void 0,s}}return e};return n(e,0)},isAsyncFn:D,isThenable:e=>e&&(m(e)||p(e))&&p(e.then)&&p(e.catch)};function B(e,t,n,r,s){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),s&&(this.response=s)}F.inherits(B,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:F.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const U=B.prototype,q={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{q[e]={value:e}})),Object.defineProperties(B,q),Object.defineProperty(U,"isAxiosError",{value:!0}),B.from=(e,t,n,r,s,i)=>{const o=Object.create(U);return F.toFlatObject(e,o,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),B.call(o,e.message,t,n,r,s),o.cause=e,o.name=e.name,i&&Object.assign(o,i),o};const I=B;function M(e){return F.isPlainObject(e)||F.isArray(e)}function H(e){return F.endsWith(e,"[]")?e.slice(0,-2):e}function $(e,t,n){return e?e.concat(t).map((function(e,t){return e=H(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const z=F.toFlatObject(F,{},null,(function(e){return/^is[A-Z]/.test(e)})),J=function(e,t,n){if(!F.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=F.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!F.isUndefined(t[e])}))).metaTokens,s=n.visitor||l,i=n.dots,o=n.indexes,a=(n.Blob||"undefined"!=typeof Blob&&Blob)&&F.isSpecCompliantForm(t);if(!F.isFunction(s))throw new TypeError("visitor must be a function");function c(e){if(null===e)return"";if(F.isDate(e))return e.toISOString();if(!a&&F.isBlob(e))throw new I("Blob is not supported. Use a Buffer instead.");return F.isArrayBuffer(e)||F.isTypedArray(e)?a&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function l(e,n,s){let a=e;if(e&&!s&&"object"==typeof e)if(F.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(F.isArray(e)&&function(e){return F.isArray(e)&&!e.some(M)}(e)||(F.isFileList(e)||F.endsWith(n,"[]"))&&(a=F.toArray(e)))return n=H(n),a.forEach((function(e,r){!F.isUndefined(e)&&null!==e&&t.append(!0===o?$([n],r,i):null===o?n:n+"[]",c(e))})),!1;return!!M(e)||(t.append($(s,n,i),c(e)),!1)}const u=[],d=Object.assign(z,{defaultVisitor:l,convertValue:c,isVisitable:M});if(!F.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!F.isUndefined(n)){if(-1!==u.indexOf(n))throw Error("Circular reference detected in "+r.join("."));u.push(n),F.forEach(n,(function(n,i){!0===(!(F.isUndefined(n)||null===n)&&s.call(t,n,F.isString(i)?i.trim():i,r,d))&&e(n,r?r.concat(i):[i])})),u.pop()}}(e),t};function W(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function K(e,t){this._pairs=[],e&&J(e,this,t)}const V=K.prototype;V.append=function(e,t){this._pairs.push([e,t])},V.toString=function(e){const t=e?function(t){return e.call(this,t,W)}:W;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const G=K;function X(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Q(e,t,n){if(!t)return e;const r=n&&n.encode||X,s=n&&n.serialize;let i;if(i=s?s(t,n):F.isURLSearchParams(t)?t.toString():new G(t,n).toString(r),i){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}const Z=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){F.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},Y={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},ee={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:G,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},te="undefined"!=typeof window&&"undefined"!=typeof document,ne=(re="undefined"!=typeof navigator&&navigator.product,te&&["ReactNative","NativeScript","NS"].indexOf(re)<0);var re;const se="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,ie={...e,...ee},oe=function(e){function t(e,n,r,s){let i=e[s++];if("__proto__"===i)return!0;const o=Number.isFinite(+i),a=s>=e.length;return i=!i&&F.isArray(r)?r.length:i,a?(F.hasOwnProp(r,i)?r[i]=[r[i],n]:r[i]=n,!o):(r[i]&&F.isObject(r[i])||(r[i]=[]),t(e,n,r[i],s)&&F.isArray(r[i])&&(r[i]=function(e){const t={},n=Object.keys(e);let r;const s=n.length;let i;for(r=0;r<s;r++)i=n[r],t[i]=e[i];return t}(r[i])),!o)}if(F.isFormData(e)&&F.isFunction(e.entries)){const n={};return F.forEachEntry(e,((e,r)=>{t(function(e){return F.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},ae={transitional:Y,adapter:["xhr","http"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,s=F.isObject(e);if(s&&F.isHTMLForm(e)&&(e=new FormData(e)),F.isFormData(e))return r?JSON.stringify(oe(e)):e;if(F.isArrayBuffer(e)||F.isBuffer(e)||F.isStream(e)||F.isFile(e)||F.isBlob(e))return e;if(F.isArrayBufferView(e))return e.buffer;if(F.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let i;if(s){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return J(e,new ie.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return ie.isNode&&F.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((i=F.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return J(i?{"files[]":e}:e,t&&new t,this.formSerializer)}}return s||r?(t.setContentType("application/json",!1),function(e,t,n){if(F.isString(e))try{return(0,JSON.parse)(e),F.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||ae.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(e&&F.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw I.from(e,I.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:ie.classes.FormData,Blob:ie.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};F.forEach(["delete","get","head","post","put","patch"],(e=>{ae.headers[e]={}}));const ce=ae,le=F.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),ue=Symbol("internals");function de(e){return e&&String(e).trim().toLowerCase()}function fe(e){return!1===e||null==e?e:F.isArray(e)?e.map(fe):String(e)}function pe(e,t,n,r,s){return F.isFunction(r)?r.call(this,t,n):(s&&(t=n),F.isString(t)?F.isString(r)?-1!==t.indexOf(r):F.isRegExp(r)?r.test(t):void 0:void 0)}class he{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function s(e,t,n){const s=de(t);if(!s)throw new Error("header name must be a non-empty string");const i=F.findKey(r,s);(!i||void 0===r[i]||!0===n||void 0===n&&!1!==r[i])&&(r[i||t]=fe(e))}const i=(e,t)=>F.forEach(e,((e,n)=>s(e,n,t)));return F.isPlainObject(e)||e instanceof this.constructor?i(e,t):F.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?i((e=>{const t={};let n,r,s;return e&&e.split("\n").forEach((function(e){s=e.indexOf(":"),n=e.substring(0,s).trim().toLowerCase(),r=e.substring(s+1).trim(),!n||t[n]&&le[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t):null!=e&&s(t,e,n),this}get(e,t){if(e=de(e)){const n=F.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(F.isFunction(t))return t.call(this,e,n);if(F.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=de(e)){const n=F.findKey(this,e);return!(!n||void 0===this[n]||t&&!pe(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function s(e){if(e=de(e)){const s=F.findKey(n,e);!s||t&&!pe(0,n[s],s,t)||(delete n[s],r=!0)}}return F.isArray(e)?e.forEach(s):s(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const s=t[n];e&&!pe(0,this[s],s,e,!0)||(delete this[s],r=!0)}return r}normalize(e){const t=this,n={};return F.forEach(this,((r,s)=>{const i=F.findKey(n,s);if(i)return t[i]=fe(r),void delete t[s];const o=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(s):String(s).trim();o!==s&&delete t[s],t[o]=fe(r),n[o]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return F.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&F.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[ue]=this[ue]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=de(e);t[r]||(function(e,t){const n=F.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,s){return this[r].call(this,t,e,n,s)},configurable:!0})}))}(n,e),t[r]=!0)}return F.isArray(e)?e.forEach(r):r(e),this}}he.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),F.reduceDescriptors(he.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),F.freezeMethods(he);const me=he;function ge(e,t){const n=this||ce,r=t||n,s=me.from(r.headers);let i=r.data;return F.forEach(e,(function(e){i=e.call(n,i,s.normalize(),t?t.status:void 0)})),s.normalize(),i}function be(e){return!(!e||!e.__CANCEL__)}function ye(e,t,n){I.call(this,null==e?"canceled":e,I.ERR_CANCELED,t,n),this.name="CanceledError"}F.inherits(ye,I,{__CANCEL__:!0});const ve=ye,_e=ie.hasStandardBrowserEnv?{write(e,t,n,r,s,i){const o=[e+"="+encodeURIComponent(t)];F.isNumber(n)&&o.push("expires="+new Date(n).toGMTString()),F.isString(r)&&o.push("path="+r),F.isString(s)&&o.push("domain="+s),!0===i&&o.push("secure"),document.cookie=o.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function we(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const Ee=ie.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=F.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};function Se(e,t){let n=0;const r=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let s,i=0,o=0;return t=void 0!==t?t:1e3,function(a){const c=Date.now(),l=r[o];s||(s=c),n[i]=a,r[i]=c;let u=o,d=0;for(;u!==i;)d+=n[u++],u%=e;if(i=(i+1)%e,i===o&&(o=(o+1)%e),c-s<t)return;const f=l&&c-l;return f?Math.round(1e3*d/f):void 0}}(50,250);return s=>{const i=s.loaded,o=s.lengthComputable?s.total:void 0,a=i-n,c=r(a);n=i;const l={loaded:i,total:o,progress:o?i/o:void 0,bytes:a,rate:c||void 0,estimated:c&&o&&i<=o?(o-i)/c:void 0,event:s};l[t?"download":"upload"]=!0,e(l)}}const Oe={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){let r=e.data;const s=me.from(e.headers).normalize();let i,o,{responseType:a,withXSRFToken:c}=e;function l(){e.cancelToken&&e.cancelToken.unsubscribe(i),e.signal&&e.signal.removeEventListener("abort",i)}if(F.isFormData(r))if(ie.hasStandardBrowserEnv||ie.hasStandardBrowserWebWorkerEnv)s.setContentType(!1);else if(!1!==(o=s.getContentType())){const[e,...t]=o?o.split(";").map((e=>e.trim())).filter(Boolean):[];s.setContentType([e||"multipart/form-data",...t].join("; "))}let u=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";s.set("Authorization","Basic "+btoa(t+":"+n))}const d=we(e.baseURL,e.url);function f(){if(!u)return;const r=me.from("getAllResponseHeaders"in u&&u.getAllResponseHeaders());!function(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new I("Request failed with status code "+n.status,[I.ERR_BAD_REQUEST,I.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),l()}),(function(e){n(e),l()}),{data:a&&"text"!==a&&"json"!==a?u.response:u.responseText,status:u.status,statusText:u.statusText,headers:r,config:e,request:u}),u=null}if(u.open(e.method.toUpperCase(),Q(d,e.params,e.paramsSerializer),!0),u.timeout=e.timeout,"onloadend"in u?u.onloadend=f:u.onreadystatechange=function(){u&&4===u.readyState&&(0!==u.status||u.responseURL&&0===u.responseURL.indexOf("file:"))&&setTimeout(f)},u.onabort=function(){u&&(n(new I("Request aborted",I.ECONNABORTED,e,u)),u=null)},u.onerror=function(){n(new I("Network Error",I.ERR_NETWORK,e,u)),u=null},u.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||Y;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new I(t,r.clarifyTimeoutError?I.ETIMEDOUT:I.ECONNABORTED,e,u)),u=null},ie.hasStandardBrowserEnv&&(c&&F.isFunction(c)&&(c=c(e)),c||!1!==c&&Ee(d))){const t=e.xsrfHeaderName&&e.xsrfCookieName&&_e.read(e.xsrfCookieName);t&&s.set(e.xsrfHeaderName,t)}void 0===r&&s.setContentType(null),"setRequestHeader"in u&&F.forEach(s.toJSON(),(function(e,t){u.setRequestHeader(t,e)})),F.isUndefined(e.withCredentials)||(u.withCredentials=!!e.withCredentials),a&&"json"!==a&&(u.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&u.addEventListener("progress",Se(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&u.upload&&u.upload.addEventListener("progress",Se(e.onUploadProgress)),(e.cancelToken||e.signal)&&(i=t=>{u&&(n(!t||t.type?new ve(null,e,u):t),u.abort(),u=null)},e.cancelToken&&e.cancelToken.subscribe(i),e.signal&&(e.signal.aborted?i():e.signal.addEventListener("abort",i)));const p=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(d);p&&-1===ie.protocols.indexOf(p)?n(new I("Unsupported protocol "+p+":",I.ERR_BAD_REQUEST,e)):u.send(r||null)}))}};F.forEach(Oe,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const Re=e=>`- ${e}`,ke=e=>F.isFunction(e)||null===e||!1===e,Te=e=>{e=F.isArray(e)?e:[e];const{length:t}=e;let n,r;const s={};for(let i=0;i<t;i++){let t;if(n=e[i],r=n,!ke(n)&&(r=Oe[(t=String(n)).toLowerCase()],void 0===r))throw new I(`Unknown adapter '${t}'`);if(r)break;s[t||"#"+i]=r}if(!r){const e=Object.entries(s).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(Re).join("\n"):" "+Re(e[0]):"as no adapter specified";throw new I("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r};function Ae(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new ve(null,e)}function Le(e){return Ae(e),e.headers=me.from(e.headers),e.data=ge.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Te(e.adapter||ce.adapter)(e).then((function(t){return Ae(e),t.data=ge.call(e,e.transformResponse,t),t.headers=me.from(t.headers),t}),(function(t){return be(t)||(Ae(e),t&&t.response&&(t.response.data=ge.call(e,e.transformResponse,t.response),t.response.headers=me.from(t.response.headers))),Promise.reject(t)}))}const je=e=>e instanceof me?e.toJSON():e;function xe(e,t){t=t||{};const n={};function r(e,t,n){return F.isPlainObject(e)&&F.isPlainObject(t)?F.merge.call({caseless:n},e,t):F.isPlainObject(t)?F.merge({},t):F.isArray(t)?t.slice():t}function s(e,t,n){return F.isUndefined(t)?F.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function i(e,t){if(!F.isUndefined(t))return r(void 0,t)}function o(e,t){return F.isUndefined(t)?F.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function a(n,s,i){return i in t?r(n,s):i in e?r(void 0,n):void 0}const c={url:i,method:i,data:i,baseURL:o,transformRequest:o,transformResponse:o,paramsSerializer:o,timeout:o,timeoutMessage:o,withCredentials:o,withXSRFToken:o,adapter:o,responseType:o,xsrfCookieName:o,xsrfHeaderName:o,onUploadProgress:o,onDownloadProgress:o,decompress:o,maxContentLength:o,maxBodyLength:o,beforeRedirect:o,transport:o,httpAgent:o,httpsAgent:o,cancelToken:o,socketPath:o,responseEncoding:o,validateStatus:a,headers:(e,t)=>s(je(e),je(t),!0)};return F.forEach(Object.keys(Object.assign({},e,t)),(function(r){const i=c[r]||s,o=i(e[r],t[r],r);F.isUndefined(o)&&i!==a||(n[r]=o)})),n}const Ne={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{Ne[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const Ce={};Ne.transitional=function(e,t,n){function r(e,t){return"[Axios v1.6.7] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,s,i)=>{if(!1===e)throw new I(r(s," has been removed"+(t?" in "+t:"")),I.ERR_DEPRECATED);return t&&!Ce[s]&&(Ce[s]=!0,console.warn(r(s," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,s,i)}};const Pe={assertOptions:function(e,t,n){if("object"!=typeof e)throw new I("options must be an object",I.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let s=r.length;for(;s-- >0;){const i=r[s],o=t[i];if(o){const t=e[i],n=void 0===t||o(t,i,e);if(!0!==n)throw new I("option "+i+" must be "+n,I.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new I("Unknown option "+i,I.ERR_BAD_OPTION)}},validators:Ne},De=Pe.validators;class Fe{constructor(e){this.defaults=e,this.interceptors={request:new Z,response:new Z}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t;Error.captureStackTrace?Error.captureStackTrace(t={}):t=new Error;const n=t.stack?t.stack.replace(/^.+\n/,""):"";e.stack?n&&!String(e.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+n):e.stack=n}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=xe(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:s}=t;void 0!==n&&Pe.assertOptions(n,{silentJSONParsing:De.transitional(De.boolean),forcedJSONParsing:De.transitional(De.boolean),clarifyTimeoutError:De.transitional(De.boolean)},!1),null!=r&&(F.isFunction(r)?t.paramsSerializer={serialize:r}:Pe.assertOptions(r,{encode:De.function,serialize:De.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let i=s&&F.merge(s.common,s[t.method]);s&&F.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete s[e]})),t.headers=me.concat(i,s);const o=[];let a=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(a=a&&e.synchronous,o.unshift(e.fulfilled,e.rejected))}));const c=[];let l;this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));let u,d=0;if(!a){const e=[Le.bind(this),void 0];for(e.unshift.apply(e,o),e.push.apply(e,c),u=e.length,l=Promise.resolve(t);d<u;)l=l.then(e[d++],e[d++]);return l}u=o.length;let f=t;for(d=0;d<u;){const e=o[d++],t=o[d++];try{f=e(f)}catch(e){t.call(this,e);break}}try{l=Le.call(this,f)}catch(e){return Promise.reject(e)}for(d=0,u=c.length;d<u;)l=l.then(c[d++],c[d++]);return l}getUri(e){return Q(we((e=xe(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}F.forEach(["delete","get","head","options"],(function(e){Fe.prototype[e]=function(t,n){return this.request(xe(n||{},{method:e,url:t,data:(n||{}).data}))}})),F.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,s){return this.request(xe(s||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}Fe.prototype[e]=t(),Fe.prototype[e+"Form"]=t(!0)}));const Be=Fe;class Ue{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,s){n.reason||(n.reason=new ve(e,r,s),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new Ue((function(t){e=t})),cancel:e}}}const qe=Ue,Ie={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Ie).forEach((([e,t])=>{Ie[t]=e}));const Me=Ie,He=function e(n){const r=new Be(n),s=t(Be.prototype.request,r);return F.extend(s,Be.prototype,r,{allOwnKeys:!0}),F.extend(s,r,null,{allOwnKeys:!0}),s.create=function(t){return e(xe(n,t))},s}(ce);He.Axios=Be,He.CanceledError=ve,He.CancelToken=qe,He.isCancel=be,He.VERSION="1.6.7",He.toFormData=J,He.AxiosError=I,He.Cancel=He.CanceledError,He.all=function(e){return Promise.all(e)},He.spread=function(e){return function(t){return e.apply(null,t)}},He.isAxiosError=function(e){return F.isObject(e)&&!0===e.isAxiosError},He.mergeConfig=xe,He.AxiosHeaders=me,He.formToJSON=e=>oe(F.isHTMLForm(e)?new FormData(e):e),He.getAdapter=Te,He.HttpStatusCode=Me,He.default=He;const $e=He;class ze{constructor(e){this.query=e}async doSearch(){try{const e=await $e("https://forkify-api.herokuapp.com/api/search?q="+this.query);return this.result=e.data.recipes,this.result}catch(e){console.log("Error: "+e)}}}const Je={searchForm:document.querySelector(".search"),searchInput:document.querySelector(".search__field"),searchResultDiv:document.querySelector(".results"),searchResultList:document.querySelector(".results"),pageButtons:document.querySelector(".pagination"),recipeDiv:document.querySelector(".recipe"),shoppingList:document.querySelector(".bookmarks__list"),likesMenu:document.querySelector(".bookmarks__list"),likesList:document.querySelector(".bookmarks__list")},We="spinner",Ke=e=>{const t=`\n    <li class="preview">\n        <a class="preview__link" href="#${e.recipe_id}">\n            <figure class="preview__fig">\n                <img src="${e.image_url}" alt="Test">\n            </figure>\n            <div class="preview__data">\n                <h4 class="preview__title">${e.title}</h4>\n                <p class="preview__publisher">${e.publisher}</p>\n                <div class="preview__user-generated hidden">\n                    <svg>\n                    <use href="./image/icons.c781f215.svg#icon-user"></use>\n                    </svg>\n                </div>\n            </div>\n        </a>\n    </li>\n  `;Je.searchResultList.insertAdjacentHTML("beforeend",t)},Ve=()=>{Je.searchResultList.innerHTML="",Je.pageButtons.innerHTML=""},Ge=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10;const r=(t-1)*n,s=t*n;e.slice(r,s).forEach(Ke);const i=Math.ceil(e.length/n);Qe(t,i)},Xe=(e,t,n)=>`<button class="btn--inline pagination__btn--${t}" data-goto=${e}>\n  <span>Хуудас ${e}</span>\n  <svg class="search__icon">\n    <use href="./image/icons.svg#icon-arrow-${n}"></use>\n  </svg>\n  </button>`,Qe=(e,t)=>{let n;1===e&&t>1?n=Xe(2,"next","right"):e<t?(n=Xe(e-1,"prev","left"),n+=Xe(e+1,"next","right")):e===t&&(n=Xe(e-1,"prev","left")),Je.pageButtons.insertAdjacentHTML("afterbegin",n)};class Ze{constructor(e){this.id=e}async getRecipe(){const e=await $e("https://forkify-api.herokuapp.com/api/get?rId="+this.id);this.publisher=e.data.recipe.publisher,this.ingredients=e.data.recipe.ingredients,this.source_url=e.data.recipe.source_url,this.image_url=e.data.recipe.image_url,this.publisher_url=e.data.recipe.publisher_url,this.title=e.data.recipe.title,this.social_rank=e.data.recipe.social_rank}calcTime(){this.time=5*this.ingredients.length}calcHuniiToo(){this.huniiToo=4}}var Ye=n(797),et=n.n(Ye);class tt{constructor(){this.items=[]}deleteItem(e){const t=this.items.findIndex((t=>t.id===e));this.items.splice(t,1)}addItem(e){let t={id:et()(),item:e};return this.items.push(t),t}}class nt{constructor(){this.readDataFromLocalStorage(),this.likes||(this.likes=[])}addLike(e,t,n,r){const s={id:e,title:t,publisher:n,img:r};return this.likes.push(s),this.saveDataToLocalStorage(),s}deleteLike(e){const t=this.likes.findIndex((t=>t.id===e));this.likes.splice(t,1),this.saveDataToLocalStorage()}isLiked(e){return-1!==this.likes.findIndex((t=>t.id===e))}getNumberOfLikes(){return this.likes.length}saveDataToLocalStorage(){localStorage.setItem("likes",JSON.stringify(this.likes))}readDataFromLocalStorage(){this.likes=JSON.parse(localStorage.getItem("likes"))}}const rt=e=>{const t=e?"icon-heart":"icon-heart-outlined";document.querySelector(".recipe__love use").setAttribute("href",`image/icons.svg#${t}`)},st=e=>{Je.likesMenu.style.visibility=e>0?"visible":"hidden"},it=e=>{const t=`\n      <li class="preview">\n          <a class="preview__link likes__link" href="#${e.id}">\n              <figure class="preview__fig likes__fig">\n                  <img src="${e.img}" alt="Test">\n              </figure>\n              <div class="preview__data">\n              <h4 class="preview__title">${e.title}</h4>\n              <p class="preview__publisher">${e.publisher}</p>\n              <div class="preview__user-generated">\n                <svg>\n                <use href="image/icons.svg#icon-minus-circle"></use>\n                </svg>\n              </div>\n            </div>\n          </a>\n      </li>\n    `;Je.likesList.insertAdjacentHTML("beforeend",t)},ot={},at=async()=>{const e=Je.searchInput.value;e&&(ot.search=new ze(e),Je.searchInput.value="",Ve(),(e=>{const t=`\n        <div class="${We}">\n            <svg>\n                <use href="image/icons.svg#icon-loader"></use>\n            </svg>\n        </div>\n    `;e.insertAdjacentHTML("afterbegin",t)})(Je.searchResultDiv),await ot.search.doSearch(),(()=>{const e=document.querySelector(`.${We}`);e&&e.parentElement.removeChild(e)})(),void 0===ot.search.result?alert("Хайлтаар илэрцгүй..."):Ge(ot.search.result))};at(),Je.searchForm.addEventListener("submit",(e=>{e.preventDefault(),at()})),Je.pageButtons.addEventListener("click",(e=>{const t=e.target.closest(".btn--inline");if(t){const e=parseInt(t.dataset.goto,10);Ve(),Ge(ot.search.result,e)}}));const ct=async()=>{const e=window.location.hash.replace("#","");ot.recipe=new Ze(e),Je.recipeDiv.innerHTML="",await ot.recipe.getRecipe(),ot.recipe.calcTime(),ot.recipe.calcHuniiToo(),((e,t)=>{const n=`\n    <figure class="recipe__fig">\n        <img src="${e.image_url}" alt="${e.title}" class="recipe__img">\n        <h1 class="recipe__title">\n            <span>${e.title}</span>\n        </h1>\n        </figure>\n        <div class="recipe__details">\n        <div class="recipe__info">\n            <svg class="recipe__info-icon">\n                <use href="image/icons.svg#icon-clock"></use>\n            </svg>\n            <span class="recipe__info-data recipe__info-data--minutes">${e.time}</span>\n            <span class="recipe__info-text"> минут </span>\n        </div>\n        <div class="recipe__info">\n            <svg class="recipe__info-icon">\n                <use href="image/icons.svg#icon-users"></use>\n            </svg>\n            <span class="recipe__info-data recipe__info-data--people">${e.huniiToo}</span>\n            <span class="recipe__info-text"> хүний орц</span>\n\n            <div class="recipe__info-buttons">\n                <button class="btn--tiny btn--update-servings">\n                    <svg>\n                        <use href="image/icons.svg#icon-minus-circle"></use>\n                    </svg>\n                </button>\n                <button class="btn--tiny btn--update-servings">\n                    <svg>\n                        <use href="image/icons.svg#icon-plus-circle"></use>\n                    </svg>\n                </button>\n            </div>\n\n        </div>\n        <div class="recipe__love recipe__user-generated">\n            <svg class="header__likes">\n                <use href="image/icons.svg#icon-user"></use>\n            </svg>\n        </div>\n        <button class="btn--round btn--bookmark">\n          <svg class="">\n            <use href="image/icons.svg#icon-bookmark"></use>\n          </svg>\n        </button>\n        </div>\n\n        <div class="recipe__ingredients">\n        <ul class="recipe__ingredient-list">\n          \n            ${e.ingredients.map((e=>`\n    <li class="recipe__item recipe__ingredient">\n        <svg class="recipe__icon">\n            <use href="image/icons.svg#icon-check"></use>\n        </svg>\n        <div class="recipe__ingredient">\n\n            ${e}\n        </div>\n    </li>\n`)).join(" ")}          \n\n        </ul>\n\n        <button class="btn--small recipe__btn">\n            <svg class="search__icon">\n                <use href="image/icons.svg#icon-send"></use>\n            </svg>\n            <span>САГСАНД ХИЙХ</span>\n        </button>\n        </div>\n\n        <div class="recipe__directions">\n        <h2 class="heading-2 heading--2">Хэрхэн бэлтгэх вэ</h2>\n        <p class="recipe__directions-text">\n            Жорыг бэлтгэж оруулсан\n            <span class="recipe__by">${e.publisher}</span>. Манай вэб сайтаас жорын зааврыг авна уу\n        </p>\n        <a class="btn--small recipe__btn btn-small recipe__btn" href="${e.source_url}" target="_blank">\n            <span>ЗААВАР ҮЗЭХ</span>\n            <svg class="search__icon">\n                <use href="image/icons.svg#icon-arrow-right"></use>\n            </svg>\n\n        </a>\n        </div>\n  `;Je.recipeDiv.insertAdjacentHTML("afterbegin",n)})(ot.recipe)};["hashchange","load"].forEach((e=>window.addEventListener(e,ct))),window.addEventListener("load",(e=>{ot.likes||(ot.likes=new nt),st(ot.likes.getNumberOfLikes()),ot.likes.likes.forEach((e=>it(e)))}));Je.recipeDiv.addEventListener("click",(e=>{e.target.matches(".recipe__btn, .recipe__btn *")?lt():e.target.matches(".btn--bookmark, .btn--bookmark *")&&(()=>{ot.likes||(ot.likes=new nt);const e=ot.recipe.id;if(ot.likes.isLiked(e))ot.likes.deleteLike(e),(e=>{const t=document.querySelector(`.likes__link[href*="${e}"]`).parentElement;t&&t.parentElement.removeChild(t)})(e),rt(!1);else{const t=ot.likes.addLike(e,ot.recipe.title,ot.recipe.publisher,ot.recipe.image_url);it(t),rt(!0)}st(ot.likes.getNumberOfLikes())})()}));const lt=()=>{ot.list=new tt,Je.shoppingList.innerHTML="",ot.recipe.ingredients.forEach((e=>{ot.list.addItem(e)}))};Je.shoppingList.addEventListener("click",(e=>{const t=e.target.closest(".shopping__item").dataset.itemid;ot.list.deleteItem(t),(e=>{const t=document.querySelector(`[data-itemid="${e}"]`);t.parentElement.removeChild(t)})(t)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,